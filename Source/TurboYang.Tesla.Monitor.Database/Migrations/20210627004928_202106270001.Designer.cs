// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using NodaTime;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TurboYang.Tesla.Monitor.Database;
using TurboYang.Tesla.Monitor.Model;

namespace TurboYang.Tesla.Monitor.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210627004928_202106270001")]
    partial class _202106270001
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresEnum(null, "CarState", new[] { "Online", "Asleep", "Offline", "Driving", "Charging" })
                .HasPostgresEnum(null, "CarType", new[] { "Model3" })
                .HasPostgresEnum(null, "ShiftState", new[] { "P", "D", "N", "R" })
                .HasPostgresExtension("postgis")
                .HasPostgresExtension("uuid-ossp")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.AddressEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasIdentityOptions(10000000L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Building")
                        .HasColumnType("text")
                        .HasColumnName("Building");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("City");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("Country");

                    b.Property<string>("County")
                        .HasColumnType("text")
                        .HasColumnName("County");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("CreateBy");

                    b.Property<Instant?>("CreateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CreateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<string>("District")
                        .HasColumnType("text")
                        .HasColumnName("District");

                    b.Property<Point>("Location")
                        .IsRequired()
                        .HasColumnType("geography (point)")
                        .HasColumnName("Location");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<Guid?>("OpenId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("OpenId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Postcode")
                        .HasColumnType("text")
                        .HasColumnName("Postcode");

                    b.Property<decimal>("Radius")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValue(0.03m)
                        .HasColumnName("Radius");

                    b.Property<string>("Road")
                        .HasColumnType("text")
                        .HasColumnName("Road");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("State");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("UpdateBy");

                    b.Property<Instant?>("UpdateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<string>("Village")
                        .HasColumnType("text")
                        .HasColumnName("Village");

                    b.HasKey("Id");

                    b.HasIndex("OpenId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.CarEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasIdentityOptions(10000000L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("CarId")
                        .HasColumnType("text")
                        .HasColumnName("CarId");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("CreateBy");

                    b.Property<Instant?>("CreateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CreateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<string>("ExteriorColor")
                        .HasColumnType("text")
                        .HasColumnName("ExteriorColor");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.Property<Guid?>("OpenId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("OpenId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int?>("TokenId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("TokenId");

                    b.Property<CarType?>("Type")
                        .HasColumnType("\"CarType\"")
                        .HasColumnName("Type");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("UpdateBy");

                    b.Property<Instant?>("UpdateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<long?>("VehicleId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("VehicleId");

                    b.Property<string>("Vin")
                        .HasColumnType("text")
                        .HasColumnName("Vin");

                    b.Property<string>("WheelType")
                        .HasColumnType("text")
                        .HasColumnName("WheelType");

                    b.HasKey("Id");

                    b.HasIndex("OpenId");

                    b.HasIndex("TokenId")
                        .HasDatabaseName("IX_Car_TokenId");

                    b.ToTable("Car");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.CarSettingEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasIdentityOptions(10000000L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CarId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("CarId");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("CreateBy");

                    b.Property<Instant?>("CreateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CreateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<bool?>("IsSamplingCompression")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsSamplingCompression");

                    b.Property<Guid?>("OpenId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("OpenId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int?>("SamplingRate")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(10)
                        .HasColumnName("SamplingRate");

                    b.Property<int?>("TryAsleepDelay")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(300)
                        .HasColumnName("TryAsleepDelay");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("UpdateBy");

                    b.Property<Instant?>("UpdateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique()
                        .HasDatabaseName("IX_CarSetting_CarId");

                    b.HasIndex("OpenId");

                    b.ToTable("CarSetting");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.ChargingEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasIdentityOptions(10000000L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("AddressId");

                    b.Property<int?>("CarId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("CarId");

                    b.Property<string>("ChargeCable")
                        .HasColumnType("text")
                        .HasColumnName("ChargeCable");

                    b.Property<decimal?>("ChargeEnergyAdded")
                        .HasColumnType("numeric")
                        .HasColumnName("ChargeEnergyAdded");

                    b.Property<decimal?>("ChargeEnergyUsed")
                        .HasColumnType("numeric")
                        .HasColumnName("ChargeEnergyUsed");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("CreateBy");

                    b.Property<Instant?>("CreateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CreateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<decimal?>("Duration")
                        .HasColumnType("numeric")
                        .HasColumnName("Duration");

                    b.Property<decimal?>("Efficiency")
                        .HasColumnType("numeric")
                        .HasColumnName("Efficiency");

                    b.Property<decimal?>("Elevation")
                        .HasColumnType("numeric")
                        .HasColumnName("Elevation");

                    b.Property<decimal?>("EndBatteryLevel")
                        .HasColumnType("numeric")
                        .HasColumnName("EndBatteryLevel");

                    b.Property<decimal?>("EndIdealBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("EndIdealBatteryRange");

                    b.Property<decimal?>("EndPower")
                        .HasColumnType("numeric")
                        .HasColumnName("EndPower");

                    b.Property<decimal?>("EndRatedBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("EndRatedBatteryRange");

                    b.Property<Instant?>("EndTimestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("EndTimestamp");

                    b.Property<string>("FastChargerBrand")
                        .HasColumnType("text")
                        .HasColumnName("FastChargerBrand");

                    b.Property<string>("FastChargerType")
                        .HasColumnType("text")
                        .HasColumnName("FastChargerType");

                    b.Property<decimal?>("Heading")
                        .HasColumnType("numeric")
                        .HasColumnName("Heading");

                    b.Property<bool?>("IsFastChargerPresent")
                        .HasColumnType("boolean")
                        .HasColumnName("IsFastChargerPresent");

                    b.Property<Point>("Location")
                        .HasColumnType("geography (point)")
                        .HasColumnName("Location");

                    b.Property<decimal?>("Odometer")
                        .HasColumnType("numeric")
                        .HasColumnName("Odometer");

                    b.Property<Guid?>("OpenId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("OpenId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal?>("StartBatteryLevel")
                        .HasColumnType("numeric")
                        .HasColumnName("StartBatteryLevel");

                    b.Property<decimal?>("StartIdealBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("StartIdealBatteryRange");

                    b.Property<decimal?>("StartPower")
                        .HasColumnType("numeric")
                        .HasColumnName("StartPower");

                    b.Property<decimal?>("StartRatedBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("StartRatedBatteryRange");

                    b.Property<Instant?>("StartTimestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("StartTimestamp");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("UpdateBy");

                    b.Property<Instant?>("UpdateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("IX_Charging_AddressId");

                    b.HasIndex("CarId")
                        .HasDatabaseName("IX_Charging_CarId");

                    b.HasIndex("OpenId");

                    b.ToTable("Charging");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.ChargingSnapshotEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasIdentityOptions(10000000L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("BatteryLevel")
                        .HasColumnType("numeric")
                        .HasColumnName("BatteryLevel");

                    b.Property<string>("ChargeCable")
                        .HasColumnType("text")
                        .HasColumnName("ChargeCable");

                    b.Property<decimal?>("ChargeEnergyAdded")
                        .HasColumnType("numeric")
                        .HasColumnName("ChargeEnergyAdded");

                    b.Property<decimal?>("ChargeRate")
                        .HasColumnType("numeric")
                        .HasColumnName("ChargeRate");

                    b.Property<int?>("ChargerActualCurrent")
                        .HasColumnType("integer")
                        .HasColumnName("ChargerActualCurrent");

                    b.Property<int?>("ChargerPhases")
                        .HasColumnType("integer")
                        .HasColumnName("ChargerPhases");

                    b.Property<int?>("ChargerPilotCurrent")
                        .HasColumnType("integer")
                        .HasColumnName("ChargerPilotCurrent");

                    b.Property<int?>("ChargerPower")
                        .HasColumnType("integer")
                        .HasColumnName("ChargerPower");

                    b.Property<int?>("ChargerVoltage")
                        .HasColumnType("integer")
                        .HasColumnName("ChargerVoltage");

                    b.Property<int?>("ChargingId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("ChargingId");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("CreateBy");

                    b.Property<Instant?>("CreateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CreateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<int?>("DriverSeatHeater")
                        .HasColumnType("integer")
                        .HasColumnName("DriverSeatHeater");

                    b.Property<decimal?>("DriverTemperatureSetting")
                        .HasColumnType("numeric")
                        .HasColumnName("DriverTemperatureSetting");

                    b.Property<decimal?>("Elevation")
                        .HasColumnType("numeric")
                        .HasColumnName("Elevation");

                    b.Property<int?>("FanStatus")
                        .HasColumnType("integer")
                        .HasColumnName("FanStatus");

                    b.Property<string>("FastChargerBrand")
                        .HasColumnType("text")
                        .HasColumnName("FastChargerBrand");

                    b.Property<string>("FastChargerType")
                        .HasColumnType("text")
                        .HasColumnName("FastChargerType");

                    b.Property<decimal?>("Heading")
                        .HasColumnType("numeric")
                        .HasColumnName("Heading");

                    b.Property<decimal?>("IdealBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("IdealBatteryRange");

                    b.Property<decimal?>("InsideTemperature")
                        .HasColumnType("numeric")
                        .HasColumnName("InsideTemperature");

                    b.Property<bool?>("IsBatteryHeater")
                        .HasColumnType("boolean")
                        .HasColumnName("IsBatteryHeater");

                    b.Property<bool?>("IsBatteryHeaterOn")
                        .HasColumnType("boolean")
                        .HasColumnName("IsBatteryHeaterOn");

                    b.Property<bool?>("IsClimateOn")
                        .HasColumnType("boolean")
                        .HasColumnName("IsClimateOn");

                    b.Property<bool?>("IsFastChargerPresent")
                        .HasColumnType("boolean")
                        .HasColumnName("IsFastChargerPresent");

                    b.Property<bool?>("IsFrontDefrosterOn")
                        .HasColumnType("boolean")
                        .HasColumnName("IsFrontDefrosterOn");

                    b.Property<bool?>("IsRearDefrosterOn")
                        .HasColumnType("boolean")
                        .HasColumnName("IsRearDefrosterOn");

                    b.Property<bool?>("IsSideMirrorHeater")
                        .HasColumnType("boolean")
                        .HasColumnName("IsSideMirrorHeater");

                    b.Property<bool?>("IsWiperBladeHeater")
                        .HasColumnType("boolean")
                        .HasColumnName("IsWiperBladeHeater");

                    b.Property<Point>("Location")
                        .HasColumnType("geography (point)")
                        .HasColumnName("Location");

                    b.Property<decimal?>("Odometer")
                        .HasColumnType("numeric")
                        .HasColumnName("Odometer");

                    b.Property<Guid?>("OpenId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("OpenId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal?>("OutsideTemperature")
                        .HasColumnType("numeric")
                        .HasColumnName("OutsideTemperature");

                    b.Property<int?>("PassengerSeatHeater")
                        .HasColumnType("integer")
                        .HasColumnName("PassengerSeatHeater");

                    b.Property<decimal?>("PassengerTemperatureSetting")
                        .HasColumnType("numeric")
                        .HasColumnName("PassengerTemperatureSetting");

                    b.Property<decimal?>("RatedBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("RatedBatteryRange");

                    b.Property<Instant?>("Timestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("Timestamp");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("UpdateBy");

                    b.Property<Instant?>("UpdateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.HasKey("Id");

                    b.HasIndex("ChargingId")
                        .HasDatabaseName("IX_ChargingSnapshot_ChargingId");

                    b.HasIndex("OpenId");

                    b.HasIndex("Timestamp");

                    b.ToTable("ChargingSnapshot");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.DrivingEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasIdentityOptions(10000000L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CarId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("CarId");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("CreateBy");

                    b.Property<Instant?>("CreateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CreateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<decimal?>("Distance")
                        .HasColumnType("numeric")
                        .HasColumnName("Distance");

                    b.Property<decimal?>("Duration")
                        .HasColumnType("numeric")
                        .HasColumnName("Duration");

                    b.Property<int?>("EndAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("EndAddressId");

                    b.Property<decimal?>("EndBatteryLevel")
                        .HasColumnType("numeric")
                        .HasColumnName("EndBatteryLevel");

                    b.Property<decimal?>("EndIdealBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("EndIdealBatteryRange");

                    b.Property<Point>("EndLocation")
                        .HasColumnType("geography (point)")
                        .HasColumnName("EndLocation");

                    b.Property<decimal?>("EndOdometer")
                        .HasColumnType("numeric")
                        .HasColumnName("EndOdometer");

                    b.Property<decimal?>("EndPower")
                        .HasColumnType("numeric")
                        .HasColumnName("EndPower");

                    b.Property<decimal?>("EndRatedBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("EndRatedBatteryRange");

                    b.Property<Instant?>("EndTimestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("EndTimestamp");

                    b.Property<Guid?>("OpenId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("OpenId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal?>("SpeedAverage")
                        .HasColumnType("numeric")
                        .HasColumnName("SpeedAverage");

                    b.Property<int?>("StartAddressId")
                        .HasColumnType("integer")
                        .HasColumnName("StartAddressId");

                    b.Property<decimal?>("StartBatteryLevel")
                        .HasColumnType("numeric")
                        .HasColumnName("StartBatteryLevel");

                    b.Property<decimal?>("StartIdealBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("StartIdealBatteryRange");

                    b.Property<Point>("StartLocation")
                        .HasColumnType("geography (point)")
                        .HasColumnName("StartLocation");

                    b.Property<decimal?>("StartOdometer")
                        .HasColumnType("numeric")
                        .HasColumnName("StartOdometer");

                    b.Property<decimal?>("StartPower")
                        .HasColumnType("numeric")
                        .HasColumnName("StartPower");

                    b.Property<decimal?>("StartRatedBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("StartRatedBatteryRange");

                    b.Property<Instant?>("StartTimestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("StartTimestamp");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("UpdateBy");

                    b.Property<Instant?>("UpdateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .HasDatabaseName("IX_Driving_CarId");

                    b.HasIndex("EndAddressId")
                        .HasDatabaseName("IX_Driving_EndAddressId");

                    b.HasIndex("OpenId");

                    b.HasIndex("StartAddressId")
                        .HasDatabaseName("IX_Driving_StartAddressId");

                    b.ToTable("Driving");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.DrivingSnapshotEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasIdentityOptions(10000000L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("BatteryLevel")
                        .HasColumnType("numeric")
                        .HasColumnName("BatteryLevel");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("CreateBy");

                    b.Property<Instant?>("CreateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CreateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<int?>("DriverSeatHeater")
                        .HasColumnType("integer")
                        .HasColumnName("DriverSeatHeater");

                    b.Property<decimal?>("DriverTemperatureSetting")
                        .HasColumnType("numeric")
                        .HasColumnName("DriverTemperatureSetting");

                    b.Property<int?>("DrivingId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("DrivingId");

                    b.Property<decimal?>("Elevation")
                        .HasColumnType("numeric")
                        .HasColumnName("Elevation");

                    b.Property<int?>("FanStatus")
                        .HasColumnType("integer")
                        .HasColumnName("FanStatus");

                    b.Property<decimal?>("Heading")
                        .HasColumnType("numeric")
                        .HasColumnName("Heading");

                    b.Property<decimal?>("IdealBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("IdealBatteryRange");

                    b.Property<decimal?>("InsideTemperature")
                        .HasColumnType("numeric")
                        .HasColumnName("InsideTemperature");

                    b.Property<bool?>("IsBatteryHeater")
                        .HasColumnType("boolean")
                        .HasColumnName("IsBatteryHeater");

                    b.Property<bool?>("IsBatteryHeaterOn")
                        .HasColumnType("boolean")
                        .HasColumnName("IsBatteryHeaterOn");

                    b.Property<bool?>("IsClimateOn")
                        .HasColumnType("boolean")
                        .HasColumnName("IsClimateOn");

                    b.Property<bool?>("IsFrontDefrosterOn")
                        .HasColumnType("boolean")
                        .HasColumnName("IsFrontDefrosterOn");

                    b.Property<bool?>("IsRearDefrosterOn")
                        .HasColumnType("boolean")
                        .HasColumnName("IsRearDefrosterOn");

                    b.Property<bool?>("IsSideMirrorHeater")
                        .HasColumnType("boolean")
                        .HasColumnName("IsSideMirrorHeater");

                    b.Property<bool?>("IsWiperBladeHeater")
                        .HasColumnType("boolean")
                        .HasColumnName("IsWiperBladeHeater");

                    b.Property<Point>("Location")
                        .HasColumnType("geography (point)")
                        .HasColumnName("Location");

                    b.Property<decimal?>("Odometer")
                        .HasColumnType("numeric")
                        .HasColumnName("Odometer");

                    b.Property<Guid?>("OpenId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("OpenId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal?>("OutsideTemperature")
                        .HasColumnType("numeric")
                        .HasColumnName("OutsideTemperature");

                    b.Property<int?>("PassengerSeatHeater")
                        .HasColumnType("integer")
                        .HasColumnName("PassengerSeatHeater");

                    b.Property<decimal?>("PassengerTemperatureSetting")
                        .HasColumnType("numeric")
                        .HasColumnName("PassengerTemperatureSetting");

                    b.Property<decimal?>("Power")
                        .HasColumnType("numeric")
                        .HasColumnName("Power");

                    b.Property<decimal?>("RatedBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("RatedBatteryRange");

                    b.Property<ShiftState?>("ShiftState")
                        .HasColumnType("\"ShiftState\"")
                        .HasColumnName("ShiftState");

                    b.Property<decimal?>("Speed")
                        .HasColumnType("numeric")
                        .HasColumnName("Speed");

                    b.Property<Instant?>("Timestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("Timestamp");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("UpdateBy");

                    b.Property<Instant?>("UpdateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.HasKey("Id");

                    b.HasIndex("DrivingId")
                        .HasDatabaseName("IX_DrivingSnapshot_DrivingId");

                    b.HasIndex("OpenId");

                    b.HasIndex("Timestamp");

                    b.ToTable("DrivingSnapshot");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.SnapshotEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasIdentityOptions(10000000L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("BatteryLevel")
                        .HasColumnType("numeric")
                        .HasColumnName("BatteryLevel");

                    b.Property<int?>("CarId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("CarId");

                    b.Property<decimal?>("ChargeEnergyAdded")
                        .HasColumnType("numeric")
                        .HasColumnName("ChargeEnergyAdded");

                    b.Property<decimal?>("ChargeEnergyUsed")
                        .HasColumnType("numeric")
                        .HasColumnName("ChargeEnergyUsed");

                    b.Property<decimal?>("ChargeRate")
                        .HasColumnType("numeric")
                        .HasColumnName("ChargeRate");

                    b.Property<int?>("ChargerActualCurrent")
                        .HasColumnType("integer")
                        .HasColumnName("ChargerActualCurrent");

                    b.Property<int?>("ChargerPhases")
                        .HasColumnType("integer")
                        .HasColumnName("ChargerPhases");

                    b.Property<int?>("ChargerPilotCurrent")
                        .HasColumnType("integer")
                        .HasColumnName("ChargerPilotCurrent");

                    b.Property<int?>("ChargerPower")
                        .HasColumnType("integer")
                        .HasColumnName("ChargerPower");

                    b.Property<int?>("ChargerVoltage")
                        .HasColumnType("integer")
                        .HasColumnName("ChargerVoltage");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("CreateBy");

                    b.Property<Instant?>("CreateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CreateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<int?>("DriverSeatHeater")
                        .HasColumnType("integer")
                        .HasColumnName("DriverSeatHeater");

                    b.Property<decimal?>("DriverTemperatureSetting")
                        .HasColumnType("numeric")
                        .HasColumnName("DriverTemperatureSetting");

                    b.Property<decimal?>("Elevation")
                        .HasColumnType("numeric")
                        .HasColumnName("Elevation");

                    b.Property<int?>("FanStatus")
                        .HasColumnType("integer")
                        .HasColumnName("FanStatus");

                    b.Property<decimal?>("Heading")
                        .HasColumnType("numeric")
                        .HasColumnName("Heading");

                    b.Property<decimal?>("IdealBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("IdealBatteryRange");

                    b.Property<decimal?>("InsideTemperature")
                        .HasColumnType("numeric")
                        .HasColumnName("InsideTemperature");

                    b.Property<bool?>("IsBatteryHeater")
                        .HasColumnType("boolean")
                        .HasColumnName("IsBatteryHeater");

                    b.Property<bool?>("IsBatteryHeaterOn")
                        .HasColumnType("boolean")
                        .HasColumnName("IsBatteryHeaterOn");

                    b.Property<bool?>("IsClimateOn")
                        .HasColumnType("boolean")
                        .HasColumnName("IsClimateOn");

                    b.Property<bool?>("IsFrontDefrosterOn")
                        .HasColumnType("boolean")
                        .HasColumnName("IsFrontDefrosterOn");

                    b.Property<bool?>("IsRearDefrosterOn")
                        .HasColumnType("boolean")
                        .HasColumnName("IsRearDefrosterOn");

                    b.Property<bool?>("IsSideMirrorHeater")
                        .HasColumnType("boolean")
                        .HasColumnName("IsSideMirrorHeater");

                    b.Property<bool?>("IsWiperBladeHeater")
                        .HasColumnType("boolean")
                        .HasColumnName("IsWiperBladeHeater");

                    b.Property<Point>("Location")
                        .HasColumnType("geography (point)")
                        .HasColumnName("Location");

                    b.Property<decimal?>("Odometer")
                        .HasColumnType("numeric")
                        .HasColumnName("Odometer");

                    b.Property<Guid?>("OpenId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("OpenId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal?>("OutsideTemperature")
                        .HasColumnType("numeric")
                        .HasColumnName("OutsideTemperature");

                    b.Property<int?>("PassengerSeatHeater")
                        .HasColumnType("integer")
                        .HasColumnName("PassengerSeatHeater");

                    b.Property<decimal?>("PassengerTemperatureSetting")
                        .HasColumnType("numeric")
                        .HasColumnName("PassengerTemperatureSetting");

                    b.Property<decimal?>("Power")
                        .HasColumnType("numeric")
                        .HasColumnName("Power");

                    b.Property<decimal?>("RatedBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("RatedBatteryRange");

                    b.Property<ShiftState?>("ShiftState")
                        .HasColumnType("\"ShiftState\"")
                        .HasColumnName("ShiftState");

                    b.Property<decimal?>("Speed")
                        .HasColumnType("numeric")
                        .HasColumnName("Speed");

                    b.Property<int?>("StateId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("StateId");

                    b.Property<Instant?>("Timestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("Timestamp");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("UpdateBy");

                    b.Property<Instant?>("UpdateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .HasDatabaseName("IX_Snapshot_CarId");

                    b.HasIndex("OpenId");

                    b.HasIndex("StateId")
                        .HasDatabaseName("IX_Snapshot_StateId");

                    b.HasIndex("Timestamp");

                    b.ToTable("Snapshot");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.StandByEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasIdentityOptions(10000000L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("integer")
                        .HasColumnName("AddressId");

                    b.Property<int?>("CarId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("CarId");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("CreateBy");

                    b.Property<Instant?>("CreateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CreateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<decimal?>("Duration")
                        .HasColumnType("numeric")
                        .HasColumnName("Duration");

                    b.Property<decimal?>("Elevation")
                        .HasColumnType("numeric")
                        .HasColumnName("Elevation");

                    b.Property<decimal?>("EndBatteryLevel")
                        .HasColumnType("numeric")
                        .HasColumnName("EndBatteryLevel");

                    b.Property<decimal?>("EndIdealBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("EndIdealBatteryRange");

                    b.Property<decimal?>("EndPower")
                        .HasColumnType("numeric")
                        .HasColumnName("EndPower");

                    b.Property<decimal?>("EndRatedBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("EndRatedBatteryRange");

                    b.Property<Instant?>("EndTimestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("EndTimestamp");

                    b.Property<decimal?>("Heading")
                        .HasColumnType("numeric")
                        .HasColumnName("Heading");

                    b.Property<Point>("Location")
                        .HasColumnType("geography (point)")
                        .HasColumnName("Location");

                    b.Property<decimal?>("Odometer")
                        .HasColumnType("numeric")
                        .HasColumnName("Odometer");

                    b.Property<decimal?>("OnlineRatio")
                        .HasColumnType("numeric")
                        .HasColumnName("OnlineRatio");

                    b.Property<Guid?>("OpenId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("OpenId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal?>("StartBatteryLevel")
                        .HasColumnType("numeric")
                        .HasColumnName("StartBatteryLevel");

                    b.Property<decimal?>("StartIdealBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("StartIdealBatteryRange");

                    b.Property<decimal?>("StartPower")
                        .HasColumnType("numeric")
                        .HasColumnName("StartPower");

                    b.Property<decimal?>("StartRatedBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("StartRatedBatteryRange");

                    b.Property<Instant?>("StartTimestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("StartTimestamp");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("UpdateBy");

                    b.Property<Instant?>("UpdateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .HasDatabaseName("IX_StandBy_AddressId");

                    b.HasIndex("CarId")
                        .HasDatabaseName("IX_StandBy_CarId");

                    b.HasIndex("OpenId");

                    b.ToTable("StandBy");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.StandBySnapshotEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasIdentityOptions(10000000L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal?>("BatteryLevel")
                        .HasColumnType("numeric")
                        .HasColumnName("BatteryLevel");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("CreateBy");

                    b.Property<Instant?>("CreateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CreateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<int?>("DriverSeatHeater")
                        .HasColumnType("integer")
                        .HasColumnName("DriverSeatHeater");

                    b.Property<decimal?>("DriverTemperatureSetting")
                        .HasColumnType("numeric")
                        .HasColumnName("DriverTemperatureSetting");

                    b.Property<decimal?>("Elevation")
                        .HasColumnType("numeric")
                        .HasColumnName("Elevation");

                    b.Property<int?>("FanStatus")
                        .HasColumnType("integer")
                        .HasColumnName("FanStatus");

                    b.Property<decimal?>("Heading")
                        .HasColumnType("numeric")
                        .HasColumnName("Heading");

                    b.Property<decimal?>("IdealBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("IdealBatteryRange");

                    b.Property<decimal?>("InsideTemperature")
                        .HasColumnType("numeric")
                        .HasColumnName("InsideTemperature");

                    b.Property<bool?>("IsBatteryHeater")
                        .HasColumnType("boolean")
                        .HasColumnName("IsBatteryHeater");

                    b.Property<bool?>("IsBatteryHeaterOn")
                        .HasColumnType("boolean")
                        .HasColumnName("IsBatteryHeaterOn");

                    b.Property<bool?>("IsClimateOn")
                        .HasColumnType("boolean")
                        .HasColumnName("IsClimateOn");

                    b.Property<bool?>("IsFrontDefrosterOn")
                        .HasColumnType("boolean")
                        .HasColumnName("IsFrontDefrosterOn");

                    b.Property<bool?>("IsRearDefrosterOn")
                        .HasColumnType("boolean")
                        .HasColumnName("IsRearDefrosterOn");

                    b.Property<bool?>("IsSideMirrorHeater")
                        .HasColumnType("boolean")
                        .HasColumnName("IsSideMirrorHeater");

                    b.Property<bool?>("IsWiperBladeHeater")
                        .HasColumnType("boolean")
                        .HasColumnName("IsWiperBladeHeater");

                    b.Property<Point>("Location")
                        .HasColumnType("geography (point)")
                        .HasColumnName("Location");

                    b.Property<decimal?>("Odometer")
                        .HasColumnType("numeric")
                        .HasColumnName("Odometer");

                    b.Property<Guid?>("OpenId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("OpenId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<decimal?>("OutsideTemperature")
                        .HasColumnType("numeric")
                        .HasColumnName("OutsideTemperature");

                    b.Property<int?>("PassengerSeatHeater")
                        .HasColumnType("integer")
                        .HasColumnName("PassengerSeatHeater");

                    b.Property<decimal?>("PassengerTemperatureSetting")
                        .HasColumnType("numeric")
                        .HasColumnName("PassengerTemperatureSetting");

                    b.Property<decimal?>("Power")
                        .HasColumnType("numeric")
                        .HasColumnName("Power");

                    b.Property<decimal?>("RatedBatteryRange")
                        .HasColumnType("numeric")
                        .HasColumnName("RatedBatteryRange");

                    b.Property<int?>("StandById")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("StandById");

                    b.Property<Instant?>("Timestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("Timestamp");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("UpdateBy");

                    b.Property<Instant?>("UpdateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.HasKey("Id");

                    b.HasIndex("OpenId");

                    b.HasIndex("StandById")
                        .HasDatabaseName("IX_StandBySnapshot_StandById");

                    b.HasIndex("Timestamp");

                    b.ToTable("StandBySnapshot");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.StateEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasIdentityOptions(10000000L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CarId")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("CarId");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("CreateBy");

                    b.Property<Instant?>("CreateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CreateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<Instant?>("EndTimestamp")
                        .HasColumnType("timestamp")
                        .HasColumnName("EndTimestamp");

                    b.Property<Guid?>("OpenId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("OpenId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Instant?>("StartTimestamp")
                        .IsRequired()
                        .HasColumnType("timestamp")
                        .HasColumnName("StartTimestamp");

                    b.Property<CarState?>("State")
                        .IsRequired()
                        .HasColumnType("\"CarState\"")
                        .HasColumnName("State");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("UpdateBy");

                    b.Property<Instant?>("UpdateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .HasDatabaseName("IX_State_CarId");

                    b.HasIndex("OpenId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.TokenEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id")
                        .HasIdentityOptions(10000000L, null, null, null, null, null)
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AccessToken")
                        .HasColumnType("text")
                        .HasColumnName("AccessToken");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("CreateBy");

                    b.Property<Instant?>("CreateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("CreateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<Guid?>("OpenId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("OpenId")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("RefreshToken");

                    b.Property<string>("UpdateBy")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("System")
                        .HasColumnName("UpdateBy");

                    b.Property<Instant?>("UpdateTimestamp")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("UpdateTimestamp")
                        .HasDefaultValueSql("timezone('utc'::text, now())");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.HasIndex("OpenId");

                    b.ToTable("Token");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.CarEntity", b =>
                {
                    b.HasOne("TurboYang.Tesla.Monitor.Database.Entities.TokenEntity", "Token")
                        .WithMany()
                        .HasForeignKey("TokenId")
                        .HasConstraintName("FK_Car_Token_TokenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Token");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.CarSettingEntity", b =>
                {
                    b.HasOne("TurboYang.Tesla.Monitor.Database.Entities.CarEntity", "Car")
                        .WithOne("CarSetting")
                        .HasForeignKey("TurboYang.Tesla.Monitor.Database.Entities.CarSettingEntity", "CarId")
                        .HasConstraintName("FK_CarSetting_Car_CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.ChargingEntity", b =>
                {
                    b.HasOne("TurboYang.Tesla.Monitor.Database.Entities.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_Charging_Address_AddressId");

                    b.HasOne("TurboYang.Tesla.Monitor.Database.Entities.CarEntity", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .HasConstraintName("FK_Charging_Car_CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.ChargingSnapshotEntity", b =>
                {
                    b.HasOne("TurboYang.Tesla.Monitor.Database.Entities.ChargingEntity", "Charging")
                        .WithMany()
                        .HasForeignKey("ChargingId")
                        .HasConstraintName("FK_ChargingSnapshot_Charging_ChargingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Charging");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.DrivingEntity", b =>
                {
                    b.HasOne("TurboYang.Tesla.Monitor.Database.Entities.CarEntity", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .HasConstraintName("FK_Driving_Car_CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TurboYang.Tesla.Monitor.Database.Entities.AddressEntity", "EndAddress")
                        .WithMany()
                        .HasForeignKey("EndAddressId")
                        .HasConstraintName("FK_Driving_Address_EndAddressId");

                    b.HasOne("TurboYang.Tesla.Monitor.Database.Entities.AddressEntity", "StartAddress")
                        .WithMany()
                        .HasForeignKey("StartAddressId")
                        .HasConstraintName("FK_Driving_Address_StartAddressId");

                    b.Navigation("Car");

                    b.Navigation("EndAddress");

                    b.Navigation("StartAddress");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.DrivingSnapshotEntity", b =>
                {
                    b.HasOne("TurboYang.Tesla.Monitor.Database.Entities.DrivingEntity", "Driving")
                        .WithMany()
                        .HasForeignKey("DrivingId")
                        .HasConstraintName("FK_DrivingSnapshot_Driving_DrivingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driving");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.SnapshotEntity", b =>
                {
                    b.HasOne("TurboYang.Tesla.Monitor.Database.Entities.CarEntity", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .HasConstraintName("FK_Snapshot_Car_CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TurboYang.Tesla.Monitor.Database.Entities.StateEntity", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_Snapshot_State_StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("State");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.StandByEntity", b =>
                {
                    b.HasOne("TurboYang.Tesla.Monitor.Database.Entities.AddressEntity", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .HasConstraintName("FK_StandBy_Address_AddressId");

                    b.HasOne("TurboYang.Tesla.Monitor.Database.Entities.CarEntity", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .HasConstraintName("FK_StandBy_Car_CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Car");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.StandBySnapshotEntity", b =>
                {
                    b.HasOne("TurboYang.Tesla.Monitor.Database.Entities.StandByEntity", "StandBy")
                        .WithMany()
                        .HasForeignKey("StandById")
                        .HasConstraintName("FK_StandBySnapshot_StandBy_StandById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StandBy");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.StateEntity", b =>
                {
                    b.HasOne("TurboYang.Tesla.Monitor.Database.Entities.CarEntity", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .HasConstraintName("FK_State_Car_CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("TurboYang.Tesla.Monitor.Database.Entities.CarEntity", b =>
                {
                    b.Navigation("CarSetting");
                });
#pragma warning restore 612, 618
        }
    }
}
